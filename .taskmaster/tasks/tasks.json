{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Set Up Initial Project Structure and Configuration",
        "description": "Establish the foundational project structure, including directory layout, initial configuration files, and version control setup.",
        "details": "1. Create the primary project directories (e.g., src, lib, test, docs, config).\n2. Initialize a Git repository with a .gitignore file that excludes node_modules and other unnecessary files.\n3. Set up the initial project configuration files (e.g., package.json, webpack.config.js, .eslintrc.js) with basic settings.\n4. Configure the development environment with necessary tools and dependencies (e.g., Node.js, npm/yarn).\n5. Implement a basic build script to compile and bundle the application.\n6. Set up a basic logging mechanism.\n7. Create initial README.md with project description and setup instructions.",
        "testStrategy": "1. Verify that all project directories are created correctly.\n2. Confirm that the Git repository is initialized and the .gitignore file is configured properly.\n3. Check that the configuration files are created with the correct settings.\n4. Run the build script and ensure that it compiles and bundles the application without errors.\n5. Test the logging mechanism by generating log messages and verifying that they are recorded correctly.\n6. Clone the repository to a new directory and follow the setup instructions in the README.md to ensure that the project can be set up correctly from scratch.",
        "status": "pending",
        "dependencies": [],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Implement Dynamic Form in CustomPlan.astro with Two Flows",
        "description": "Implement a dynamic form in CustomPlan.astro with two distinct flows: one for video games and another for brands, each with specific fields and validation rules. Include navigation logic between the two flows.",
        "details": "1.  Create the CustomPlan.astro component.\n2.  Define two distinct form flows: 'videoGames' and 'brands'.\n3.  For the 'videoGames' flow, include fields for: description (text), simultaneous broadcast (boolean), number of streamers (number), and campaign duration (number).\n4.  For the 'brands' flow, include fields for: description (text), promotion type (select), number of streamers (number), and duration (number).\n5.  Implement form validation for all fields, ensuring data integrity.\n6.  Implement navigation logic to allow users to switch between the 'videoGames' and 'brands' flows.\n7.  Use Astro's form handling capabilities to manage form state and submission.\n8.  Ensure the form is responsive and accessible.\n9.  Implement error handling and user feedback for invalid form inputs.\n10. Consider using a state management library (e.g., nanostores) for complex form state management.",
        "testStrategy": "1.  Verify that the CustomPlan.astro component renders correctly.\n2.  Test the 'videoGames' flow by inputting valid and invalid data into each field and verifying that validation rules are enforced.\n3.  Test the 'brands' flow by inputting valid and invalid data into each field and verifying that validation rules are enforced.\n4.  Verify that the navigation logic between the two flows works correctly.\n5.  Ensure that error messages are displayed correctly for invalid form inputs.\n6.  Test the form on different devices and screen sizes to ensure responsiveness.\n7.  Perform accessibility testing to ensure the form is usable by people with disabilities.\n8.  Submit the form with valid data and verify that the data is handled correctly (e.g., logged to the console).",
        "status": "done",
        "dependencies": [
          1
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Create CustomPlan.astro component and define initial form structure",
            "description": "Create the CustomPlan.astro component and set up the basic HTML structure for the dynamic form. Include placeholders for the two flows (videoGames and brands) and a mechanism to switch between them (e.g., radio buttons or a select dropdown).",
            "dependencies": [],
            "details": "Create a new file `CustomPlan.astro` in the appropriate directory. Use Astro's component syntax to define the basic structure. Include a state variable to track the currently active flow (default to 'videoGames'). Implement a simple UI element (e.g., radio buttons) to allow the user to switch between the 'videoGames' and 'brands' flows. Initially, display only the 'videoGames' flow fields.",
            "status": "done",
            "testStrategy": "Manually verify that the CustomPlan.astro component is created and displays the initial form structure with the 'videoGames' flow visible. Check that the flow selection mechanism (e.g., radio buttons) is present."
          },
          {
            "id": 2,
            "title": "Implement 'videoGames' flow fields and basic layout",
            "description": "Add the specific fields for the 'videoGames' flow: description (text), simultaneous broadcast (boolean), number of streamers (number), and campaign duration (number). Implement a basic layout for these fields using HTML and Astro's templating capabilities.",
            "dependencies": [],
            "details": "Within the CustomPlan.astro component, create HTML input elements for each of the 'videoGames' flow fields. Use appropriate input types (e.g., `<textarea>` for description, `<input type=\"checkbox\">` for simultaneous broadcast, `<input type=\"number\">` for number of streamers and campaign duration). Add labels for each field. Use CSS or a CSS framework (if available) to style the layout.",
            "status": "done",
            "testStrategy": "Manually verify that all 'videoGames' flow fields are displayed correctly with appropriate input types and labels. Check the layout and styling."
          },
          {
            "id": 3,
            "title": "Implement 'brands' flow fields and basic layout",
            "description": "Add the specific fields for the 'brands' flow: description (text), promotion type (select), number of streamers (number), and duration (number). Implement a basic layout for these fields using HTML and Astro's templating capabilities.",
            "dependencies": [],
            "details": "Within the CustomPlan.astro component, create HTML input elements for each of the 'brands' flow fields. Use appropriate input types (e.g., `<textarea>` for description, `<select>` for promotion type, `<input type=\"number\">` for number of streamers and duration). Populate the `<select>` element with appropriate options for promotion type (e.g., 'Product Placement', 'Influencer Marketing', 'Giveaway'). Add labels for each field. Use CSS or a CSS framework (if available) to style the layout. Initially hide this flow.",
            "status": "done",
            "testStrategy": "Manually verify that all 'brands' flow fields are displayed correctly with appropriate input types and labels. Check the layout and styling. Ensure the flow is initially hidden."
          },
          {
            "id": 4,
            "title": "Implement conditional rendering for flow selection",
            "description": "Implement conditional rendering logic to display either the 'videoGames' or 'brands' flow based on the user's selection. Use Astro's templating syntax to achieve this.",
            "dependencies": [],
            "details": "Use Astro's `Astro.props` or a state variable to track the currently selected flow. Use `if` statements or ternary operators in the template to conditionally render the HTML elements for the 'videoGames' or 'brands' flow based on the selected flow. Update the state variable when the user changes the flow selection.",
            "status": "done",
            "testStrategy": "Manually verify that only the selected flow's fields are displayed when the user switches between the 'videoGames' and 'brands' flows. Check that the correct fields are displayed for each flow."
          },
          {
            "id": 5,
            "title": "Implement basic form validation",
            "description": "Implement basic form validation for all fields in both flows. Ensure that required fields are not empty and that number fields contain valid numbers. Display error messages to the user for invalid inputs.",
            "dependencies": [],
            "details": "Use JavaScript to validate the form fields on form submission. Check if required fields are empty. Use `isNaN()` to check if number fields contain valid numbers. Display error messages next to the corresponding fields using HTML elements (e.g., `<span>`) and CSS styling. Prevent form submission if there are validation errors.",
            "status": "done",
            "testStrategy": "Manually submit the form with empty required fields and invalid number fields. Verify that error messages are displayed correctly next to the corresponding fields and that the form is not submitted."
          },
          {
            "id": 6,
            "title": "Implement form state management using nanostores",
            "description": "Integrate nanostores to manage the form state. Create separate stores for each flow and bind the form fields to the corresponding store values. Update the store values when the user changes the form fields.",
            "dependencies": [],
            "details": "Install the `nanostores` package. Create separate stores for the 'videoGames' and 'brands' flows, each containing the initial values for the corresponding fields. Use nanostores' `useStore` hook to bind the form fields to the store values. Update the store values in the `onChange` event handlers of the form fields. Use the store values to populate the form fields.",
            "status": "done",
            "testStrategy": "Verify that the form fields are correctly bound to the nanostores stores. Check that the store values are updated when the user changes the form fields. Verify that the form fields are populated with the store values."
          },
          {
            "id": 7,
            "title": "Implement form submission and error handling",
            "description": "Implement the form submission logic. Handle the form submission event and send the form data to a backend endpoint (placeholder for now). Implement error handling to display appropriate messages to the user in case of submission errors.",
            "dependencies": [],
            "details": "Add an event listener to the form's `onSubmit` event. Prevent the default form submission behavior. Collect the form data from the nanostores stores. Send the form data to a backend endpoint using `fetch` (replace with a placeholder URL for now). Handle potential errors during the submission process (e.g., network errors, server errors) and display appropriate error messages to the user.",
            "status": "done",
            "testStrategy": "Submit the form and verify that the form data is collected and sent to the placeholder backend endpoint. Simulate submission errors (e.g., by using an invalid URL) and verify that error messages are displayed correctly to the user."
          }
        ]
      },
      {
        "id": 3,
        "title": "Optimize Responsive Design for Mobile Devices",
        "description": "Optimize the responsive design for mobile devices to ensure a seamless and visually appealing user experience. This involves adjusting the layout and typography of key components for screens with a width less than 768px.",
        "details": "1.  Implement media queries in the CSS to target mobile devices (screen width < 768px).\n2.  Adjust the font sizes of headings, paragraphs, and other text elements to ensure readability on smaller screens.\n3.  Optimize the layout of key components (e.g., forms, navigation menus, images) to fit within the mobile screen dimensions.\n4.  Ensure that interactive elements (e.g., buttons, links) are easily tappable on touchscreens.\n5.  Test the design on a variety of mobile devices and browsers to ensure cross-device compatibility.\n6.  Refactor CustomPlan.astro to use mobile-first design principles, ensuring a smooth transition from mobile to larger screens.\n7.  Optimize images for mobile devices to reduce loading times and improve performance.",
        "testStrategy": "1.  Use browser developer tools to simulate mobile devices with different screen sizes and resolutions.\n2.  Manually test the design on physical mobile devices (e.g., smartphones, tablets) to ensure accurate rendering and functionality.\n3.  Verify that all text elements are legible and that interactive elements are easily tappable.\n4.  Check that the layout adapts correctly to different screen orientations (portrait and landscape).\n5.  Measure the loading times of the page on mobile devices and optimize images and other assets as needed.\n6.  Run automated tests to verify the responsive behavior of key components.",
        "status": "pending",
        "dependencies": [
          2
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Ajustes Globales de Tipografía y Espaciado",
            "description": "Revisar y ajustar global.css y paddings generales para mejorar la experiencia móvil.",
            "details": "1.1: Revisar global.css para asegurar que no haya estilos que impidan la fluidez en móviles.\n1.2: Considerar si el px-4 general es suficiente o si algunas secciones necesitan un px-2 o px-3 en móviles para un mejor uso del espacio.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 2,
            "title": "Header: Optimizar Logo y Navegación en Móviles",
            "description": "Reducir tamaño de fuente del logo y asegurar navegación óptima en móviles.",
            "details": "2.1: Reducir el tamaño de la fuente del logo 'Stream Boosters' en móviles para evitar desbordamientos.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 3,
            "title": "Hero: Ajustar SVGs y Párrafo Principal",
            "description": "Optimizar tamaño de SVGs decorativos y asegurar legibilidad del texto principal en móviles.",
            "details": "3.1: Ajustar el tamaño de los SVGs de fondo para móviles.\n3.2: Asegurar que el max-w-3xl del párrafo principal no cause problemas en pantallas pequeñas.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 4,
            "title": "How It Works: Mejorar Escalado de Números",
            "description": "Reducir tamaño de fuente de los números de paso en móviles.",
            "details": "4.1: Reducir el tamaño de la fuente de los números de paso (01, 02, 03) en móviles.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 5,
            "title": "Packages: Ajustar Tipografía de Precios",
            "description": "Reducir tamaño de fuente del precio en el plan PRO para móviles.",
            "details": "5.1: Reducir el tamaño de la fuente del precio ($XXX) en el plan PRO en móviles.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 6,
            "title": "Custom Plan: Mejorar Adaptabilidad de Botones y Radios",
            "description": "Asegurar que los botones de selección de flujo y radios se adapten bien a móviles.",
            "details": "6.1: Asegurar que los botones de selección de flujo y los botones de radio se adapten bien a pantallas pequeñas, apilándose o reduciendo padding si es necesario.",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 7,
            "title": "Founders: Optimizar Tamaño de Imágenes de Perfil",
            "description": "Reducir tamaño de imágenes de perfil de fundadores en móviles.",
            "details": "7.1: Reducir el tamaño de las imágenes de perfil de los fundadores en móviles para que no ocupen demasiado espacio vertical.",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 3
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-07-04T03:50:05.421Z",
      "updated": "2025-07-05T04:08:13.977Z",
      "description": "Development tasks"
    }
  }
}