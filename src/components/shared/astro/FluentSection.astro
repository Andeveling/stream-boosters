---
import type { HTMLAttributes } from "astro/types"
import { Icon } from "astro-icon/components"

interface Props extends HTMLAttributes<"section"> {
  /**
   * Unique identifier for the section
   */
  id?: string

  /**
   * Background pattern variant for Fluent Design
   */
  backgroundVariant?: "default" | "gradient" | "glass" | "abstract" | "geometric"

  /**
   * Depth level for layering (affects shadows and blur)
   */
  depth?: "shallow" | "medium" | "deep"

  /**
   * Animation variant for section entrance
   */
  animation?: "fade-in" | "slide-up" | "scale-in" | "none"

  /**
   * Padding variant for responsive spacing
   */
  padding?: "sm" | "md" | "lg" | "xl"

  /**
   * Background icons configuration
   */
  backgroundIcons?: Array<{
    name: string
    position: "top-left" | "top-right" | "bottom-left" | "bottom-right" | "center" | "top-center" | "bottom-center"
    size: "sm" | "md" | "lg" | "xl"
    color: "pink" | "purple" | "cyan" | "muted"
    rotation?: number
    opacity?: number
    blur?: boolean
  }>

  /**
   * Custom background image URL
   */
  backgroundImage?: string

  /**
   * Content alignment
   */
  align?: "left" | "center" | "right"
}

const {
  id,
  backgroundVariant = "default",
  depth = "medium",
  animation = "fade-in",
  padding = "lg",
  backgroundIcons = [],
  backgroundImage,
  align = "center",
  class: className = "",
  ...props
} = Astro.props as Props

// Background variant classes
const backgroundClasses = {
  default: "bg-transparent",
  gradient: "bg-gradient-to-br from-brand-darker via-brand-dark to-brand-darker",
  glass: "bg-brand-card/30 backdrop-blur-sm",
  abstract: "bg-gradient-to-tr from-brand-purple/5 via-transparent to-brand-pink/5",
  geometric: "bg-gradient-radial from-brand-cyan/5 via-brand-purple/3 to-transparent",
}

// Depth classes for shadows and layering
const depthClasses = {
  shallow: "shadow-lg shadow-brand-dark/20",
  medium: "shadow-xl shadow-brand-dark/30",
  deep: "shadow-2xl shadow-brand-dark/50",
}

// Animation classes
const animationClasses = {
  "fade-in": "animate-fade-in",
  "slide-up": "animate-slide-up",
  "scale-in": "animate-scale-in",
  none: "",
}

// Padding classes
const paddingClasses = {
  sm: "py-12 md:py-16",
  md: "py-16 md:py-24", 
  lg: "py-20 md:py-32",
  xl: "py-28 md:py-40",
}

// Alignment classes
const alignClasses = {
  left: "text-left",
  center: "text-center",
  right: "text-right",
}

// Icon position classes
const iconPositions = {
  "top-left": "top-1/4 left-1/4 -translate-x-1/2 -translate-y-1/2",
  "top-right": "top-1/4 right-1/4 translate-x-1/2 -translate-y-1/2",
  "bottom-left": "bottom-1/4 left-1/4 -translate-x-1/2 translate-y-1/2",
  "bottom-right": "bottom-1/4 right-1/4 translate-x-1/2 translate-y-1/2",
  center: "top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2",
  "top-center": "top-1/4 left-1/2 -translate-x-1/2 -translate-y-1/2",
  "bottom-center": "bottom-1/4 left-1/2 -translate-x-1/2 translate-y-1/2",
}

// Icon size classes
const iconSizes = {
  sm: "w-24 h-24 md:w-32 md:h-32",
  md: "w-32 h-32 md:w-48 md:h-48",
  lg: "w-40 h-40 md:w-64 md:h-64",
  xl: "w-48 h-48 md:w-80 md:h-80",
}

// Icon color classes
const iconColors = {
  pink: "text-brand-pink",
  purple: "text-brand-purple",
  cyan: "text-brand-cyan",
  muted: "text-text-muted",
}

const sectionClasses = [
  "relative overflow-hidden w-full", // Asegurar ancho completo
  backgroundClasses[backgroundVariant],
  depthClasses[depth],
  animationClasses[animation],
  paddingClasses[padding],
  alignClasses[align],
  className,
]
  .filter(Boolean)
  .join(" ")
---

<section {id} class={sectionClasses} {...props}>
  <!-- Background Image Layer -->
  {backgroundImage && <div class='absolute inset-0 bg-cover bg-center opacity-5 blur-sm -z-20' style={`background-image: url('${backgroundImage}');`} />}

  <!-- Background Icons Layer -->
  {
    backgroundIcons.length > 0 && (
      <div class='absolute inset-0 flex items-center justify-center opacity-10 -z-10'>
        {backgroundIcons.map((icon) => (
          <Icon
            name={icon.name}
            class={`
            ${iconSizes[icon.size]} 
            ${iconColors[icon.color]} 
            ${icon.blur ? "blur-sm" : ""} 
            absolute 
            ${iconPositions[icon.position]}
            ${icon.rotation ? `rotate-[${icon.rotation}deg]` : ""}
          `}
            style={icon.opacity ? `opacity: ${icon.opacity}` : undefined}
          />
        ))}
      </div>
    )
  }

  <!-- Content Layer -->
  <div class='relative z-10 w-full mx-auto'>
    <slot />
  </div>
</section>

<style>
  /* Additional animation keyframes for new animations */
  @keyframes slide-up {
    from {
      opacity: 0;
      transform: translateY(48px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes scale-in {
    from {
      opacity: 0;
      transform: scale(0.95);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  .animate-slide-up {
    animation: slide-up 0.8s cubic-bezier(0.4, 0, 0.2, 1) both;
  }

  .animate-scale-in {
    animation: scale-in 0.6s cubic-bezier(0.4, 0, 0.2, 1) both;
  }

  /* Gradient radial utility */
  .bg-gradient-radial {
    background-image: radial-gradient(circle, var(--tw-gradient-stops));
  }
</style>
