---
import { Icon } from 'astro-icon/components';

interface Props {
  icon: string;
  text: string;
  colorScheme: 'cyan' | 'pink' | 'purple' | 'red';
  size?: 'small' | 'large';
  colSpan?: number;
  class?: string;
}

const {
  icon,
  text,
  colorScheme,
  size = 'small',
  colSpan = 1,
  class: className = '',
} = Astro.props;

// Color scheme mapping
const colorMap = {
  cyan: {
    bg: 'from-brand-cyan/20 to-brand-cyan/5',
    border: 'border-brand-cyan/30',
    shadow: 'shadow-[0_8px_32px_0_rgba(6,182,212,0.15)]',
    hoverShadow: 'hover:shadow-[0_12px_40px_0_rgba(6,182,212,0.25)]',
    glow: 'from-brand-cyan/10',
    glowBg: 'bg-brand-cyan/10',
    iconColor: 'text-brand-cyan',
  },
  pink: {
    bg: 'from-brand-pink/20 to-brand-pink/5',
    border: 'border-brand-pink/30',
    shadow: 'shadow-[0_8px_32px_0_rgba(236,72,153,0.15)]',
    hoverShadow: 'hover:shadow-[0_12px_40px_0_rgba(236,72,153,0.25)]',
    glow: 'from-brand-pink/10',
    glowBg: 'bg-brand-pink/10',
    iconColor: 'text-brand-pink',
  },
  purple: {
    bg: 'from-brand-purple/20 to-brand-purple/5',
    border: 'border-brand-purple/30',
    shadow: 'shadow-[0_8px_32px_0_rgba(147,51,234,0.15)]',
    hoverShadow: 'hover:shadow-[0_12px_40px_0_rgba(147,51,234,0.25)]',
    glow: 'from-brand-purple/10',
    glowBg: 'bg-brand-purple/10',
    iconColor: 'text-brand-purple',
  },
  red: {
    bg: 'from-brand-red/20 to-brand-red/5',
    border: 'border-brand-red/30',
    shadow: 'shadow-[0_8px_32px_0_rgba(239,68,68,0.15)]',
    hoverShadow: 'hover:shadow-[0_12px_40px_0_rgba(239,68,68,0.25)]',
    glow: 'from-brand-red/10',
    glowBg: 'bg-brand-red/10',
    iconColor: 'text-brand-red',
  },
};

const colors = colorMap[colorScheme];

// Size-based styles
const sizeStyles = {
  small: {
    padding: 'p-3 sm:p-4',
    minHeight: 'min-h-[100px] sm:min-h-[120px]',
    gap: 'gap-2',
    iconSize: 'w-5 h-5 sm:w-6 sm:h-6',
    textSize: 'text-xs sm:text-sm',
    glowSize: 'w-10 h-10 sm:w-12 sm:h-12',
    glowBlur: 'blur-lg',
  },
  large: {
    padding: 'p-4 sm:p-6',
    minHeight: 'min-h-[120px] sm:min-h-[140px]',
    gap: 'gap-2 sm:gap-3',
    iconSize: 'w-6 h-6 sm:w-8 sm:h-8',
    textSize: 'text-base sm:text-lg',
    glowSize: 'w-16 h-16 sm:w-20 sm:h-20',
    glowBlur: 'blur-xl',
  },
};

const styles = sizeStyles[size];

// Column span classes
const colSpanClasses = {
  1: '',
  2: 'sm:col-span-2 lg:col-span-2',
  3: 'sm:col-span-2 lg:col-span-3',
  4: 'sm:col-span-2 lg:col-span-4',
};

const colSpanClass =
  colSpanClasses[colSpan as keyof typeof colSpanClasses] || '';
---

<div
  class:list={[
    'bg-gradient-to-br backdrop-blur-2xl border rounded-2xl flex flex-col items-center justify-center text-center transition-all duration-300 hover:scale-105 relative overflow-hidden group',
    colors.bg,
    colors.border,
    colors.shadow,
    colors.hoverShadow,
    styles.padding,
    styles.minHeight,
    styles.gap,
    colSpanClass,
    className,
  ]}
>
  <!-- Glow effects -->
  <div
    class:list={[
      'absolute inset-0 bg-gradient-to-r to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300',
      colors.glow,
    ]}
  >
  </div>
  <div
    class:list={[
      'absolute top-1 right-1 sm:top-2 sm:right-2 rounded-full',
      colors.glowBg,
      styles.glowSize,
      styles.glowBlur,
    ]}
  >
  </div>

  <!-- Content -->
  <Icon
    name={icon}
    class:list={['relative z-10', colors.iconColor, styles.iconSize]}
  />
  <span class:list={['font-semibold relative z-10', styles.textSize]}>
    {text}
  </span>
</div>
