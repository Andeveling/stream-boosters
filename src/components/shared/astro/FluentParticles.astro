---
interface Props {
  /**
   * Number of floating particles
   */
  count?: number;

  /**
   * Animation speed variant
   */
  speed?: "slow" | "medium" | "fast";

  /**
   * Particle colors
   */
  colors?: ("pink" | "purple" | "cyan")[];

  /**
   * Particle sizes
   */
  sizes?: ("sm" | "md" | "lg")[];
}

const {
  count = 8,
  speed = "medium",
  colors = ["pink", "purple", "cyan"],
  sizes = ["sm", "md", "lg"],
} = Astro.props as Props;

// Generate random particles
const particles = Array.from({ length: count }, (_, i) => ({
  id: i,
  color: colors[Math.floor(Math.random() * colors.length)],
  size: sizes[Math.floor(Math.random() * sizes.length)],
  delay: Math.random() * 5,
  duration: 10 + Math.random() * 10,
  startX: Math.random() * 100,
  startY: Math.random() * 100,
  endX: Math.random() * 100,
  endY: Math.random() * 100,
}));

const colorClasses = {
  pink: "bg-brand-pink",
  purple: "bg-brand-purple",
  cyan: "bg-brand-cyan",
};

const sizeClasses = {
  sm: "w-1 h-1",
  md: "w-2 h-2",
  lg: "w-3 h-3",
};

const speedClasses = {
  slow: "animate-float-slow",
  medium: "animate-float-medium",
  fast: "animate-float-fast",
};
---

<div class="absolute inset-0 overflow-hidden pointer-events-none -z-5">
  {particles.map((particle) => (
    <div
      class={`
        absolute rounded-full opacity-20
        ${colorClasses[particle.color]}
        ${sizeClasses[particle.size]}
        ${speedClasses[speed]}
      `}
      style={`
        left: ${particle.startX}%;
        top: ${particle.startY}%;
        animation-delay: ${particle.delay}s;
        animation-duration: ${particle.duration}s;
        filter: blur(1px);
      `}
    />
  ))}
</div>

<style>
  @keyframes float-slow {
    0%, 100% {
      transform: translateY(0px) translateX(0px) scale(1);
      opacity: 0.1;
    }
    25% {
      transform: translateY(-20px) translateX(10px) scale(1.1);
      opacity: 0.3;
    }
    50% {
      transform: translateY(-40px) translateX(-5px) scale(0.9);
      opacity: 0.2;
    }
    75% {
      transform: translateY(-20px) translateX(-15px) scale(1.05);
      opacity: 0.25;
    }
  }

  @keyframes float-medium {
    0%, 100% {
      transform: translateY(0px) translateX(0px) scale(1);
      opacity: 0.15;
    }
    33% {
      transform: translateY(-30px) translateX(15px) scale(1.2);
      opacity: 0.4;
    }
    66% {
      transform: translateY(-60px) translateX(-10px) scale(0.8);
      opacity: 0.3;
    }
  }

  @keyframes float-fast {
    0%, 100% {
      transform: translateY(0px) translateX(0px) scale(1);
      opacity: 0.2;
    }
    50% {
      transform: translateY(-80px) translateX(20px) scale(1.3);
      opacity: 0.5;
    }
  }

  .animate-float-slow {
    animation: float-slow infinite ease-in-out;
  }

  .animate-float-medium {
    animation: float-medium infinite ease-in-out;
  }

  .animate-float-fast {
    animation: float-fast infinite ease-in-out;
  }
</style>
